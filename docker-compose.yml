version: '3.8'

services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: votingdb
      MYSQL_USER: votinguser
      MYSQL_PASSWORD: votingpass
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoring-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    

  mysqld-exporter:
    image: prom/mysqld-exporter
    container_name: mysqld-exporter
    volumes:
      - ./monitoring/.my.cnf:/root/.my.cnf:ro
    environment:
      DATA_SOURCE_NAME: "votinguser:votingpass@tcp(mysql-db:3306)/"
    ports:
      - "9104:9104"
    depends_on:
      - mysql-db
    networks:
      - monitoring-net
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--collector.netstat'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    pid: "host"
    networks:
      - monitoring-net
    restart: always

  voting-ui:
    build:
      context: ./frontend
    container_name: voting-ui
    ports:
      - "80:80"
    environment:
      DB_HOST: mysql-db
      DB_NAME: votingdb
      DB_USER: votinguser
      DB_PASS: votingpass
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - monitoring-net
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring-net
    restart: always

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
    command:
      - "--config.file=/etc/alertmanager/config.yml"
    networks:
      - monitoring-net
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring-net
    restart: always


networks:
  monitoring-net:
    driver: bridge
