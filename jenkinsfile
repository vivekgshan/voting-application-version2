pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Clean Up') {
            steps {
                echo "Stopping and removing old containers..."
                sh 'docker-compose down || true'
            }
        }

        stage('Build Voting UI') {
            steps {
                echo "Building frontend voting UI image..."
                sh 'docker-compose build voting-ui'
            }
        }

        stage('Deploy Containers') {
            steps {
                sh '''
                echo "Checking if mysql-db container is already running..."
                if [ "$(docker ps -q -f name=mysql-db)" ]; then
                    echo "mysql-db container is already running."
                else
                    echo "Starting mysql-db container..."
                    docker-compose up -d mysql-db
                fi

                # Start other services
                docker-compose up -d --build voting-ui prometheus grafana alertmanager node-exporter mysqld-exporter cadvisor slack-relay
                '''
            }
        }

        stage('Wait for Containers') {
            steps {
                echo "Waiting for MySQL and app to be ready..."
                sh 'sleep 30' // Use better health checks in production
            }
        }

        stage('Verify Services') {
            steps {
                echo "Verifying running containers..."
                sh 'docker ps'
            }
        }

        stage('Post-Build Healthcheck') {
            steps {
                echo "Checking if voting app is accessible..."
                sh '''
                if curl --fail http://localhost:80; then
                    echo "Voting app is up!"
                else
                    echo "Voting app health check failed!"
                    exit 1
                fi
                '''
            }
        }
    }

    post {
        always {
            echo "Final Container Logs:"
            sh 'docker-compose logs --tail=50'
        }

        success {
            echo "✅ Deployment succeeded!"
        }

        failure {
            echo "❌ Deployment failed. Check the logs above."
        }
    }
}
